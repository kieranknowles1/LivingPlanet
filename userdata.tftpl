#!/bin/bash
# Script to configure a new instance with a LAMP stack, and download the app code

# Exit on error
# Error on undefined variable
# Error on piped command error
# This ensures bash will fail-fast and not try to continue on error
set -eu -o pipefail

sudo apt-get update
sudo apt-get install -y \
    unzip \
    apache2 \
    php php-gd \
    php-mbstring
    # mysql-server php-mysqlnd \

# Open local firewall to web traffic
sudo ufw allow http
sudo ufw allow https

# https://stackoverflow.com/questions/8684609/where-can-i-find-php-ini
inipath=$(php -i | grep /.+/php.ini -oE)

sudo sed -i 's/file_uploads = Off/file_uploads = On/' $inipath
sudo sed -i 's/allow_url_fopen = Off/allow_url_fopen = On/' $inipath
sudo sed -i 's/upload_max_filesize = .*$/upload_max_filesize = 64M/g' $inipath
sudo sed -i 's/memory_limit = .*/$memory_limit = 256M/g' $inipath

# Enable .htaccess files
sudo sed -i '/<Directory \/var\/www\/>/,/<\/Directory>/ s/AllowOverride None/AllowOverride All/' /etc/apache2/apache2.conf
sudo service apache2 restart

# MySQL is disabled for now, as it is a memory hog
# #  https://bertvv.github.io/notes-to-self/2015/11/16/automating-mysql_secure_installation/
# # Secure the root MySQL user
# sudo mysqladmin password "${mysql_password}"

# # Delete anonymous users
# sudo mysql -e "DELETE FROM mysql.user WHERE User='';"

# # Restrict root user to localhost
# sudo mysql -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"

# # Remove test database and all privileges related to it
# sudo mysql -e "DROP DATABASE IF EXISTS test;"
# sudo mysql -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"

# # Create a user for MySQL
# sudo mysql -e "CREATE USER '${username})'@'localhost' IDENTIFIED BY '${mysql_password}';"

# # Apply changes
# sudo mysql -e "FLUSH PRIVILEGES;"

# Download the app code
wget -O /tmp/src.zip "${src_blob_url}"

# Clear any default files in the web root and unzip the app code
sudo rm -rf /var/www/html/*
sudo unzip /tmp/src.zip -d /var/www/html

# Give Apache ownership of all public files
sudo chown -R www-data:www-data /var/www/html

# Issue a SSL certificate. Certbot automatically configures Apache to upgrade all HTTP traffic to HTTPS
sudo snap install --classic certbot

sudo certbot --apache -d "${domain}" --email "${email}" --agree-tos --non-interactive

# Install a cron job to renew the certificate
echo "0 12 1 * * root $(which certbot) renew --quiet" | sudo tee -a /etc/cron.d/certbot
